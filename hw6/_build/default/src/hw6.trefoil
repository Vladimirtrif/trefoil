(let ((x 3) (y 2) (z 1)) (+ x (+ y z)))
(define x 1)
(define (myFunc y) (+ x y))
(define x 2)
(define y 2)
(define (myFunc2 y) (+ x y))
(cond ((= (myFunc 1) 3) false) ((= (myFunc 1) 2), true))
(cond ((= (myFunc2 1) 2) false) ((= (myFunc2 1) 3), true))
(define (countDownBy2 n) ( cond ((= n 0) nil) ((= n (- 0 1)) nil) (true (cons n (countDownBy2 (- n 2)))) ) )
(countDownBy2 5)